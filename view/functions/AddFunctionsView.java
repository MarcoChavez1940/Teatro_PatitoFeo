/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view.functions;

import controller.functions.AddFunctionController;
import java.sql.Date;
import java.sql.Time;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.Calendar;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import model.Function;
import persistencia.FunctionDAO;
import persistencia.ShowDAO;

/**
 *
 * @author marco
 */
public class AddFunctionsView extends javax.swing.JDialog {

    AddFunctionController addFunctionController;
    
    /**
     * Creates new form AddFunctionsView2
     */
    public AddFunctionsView(java.awt.Frame parent, boolean modal, AddFunctionController controller) {
        super(parent, modal);
        initComponents();
        this.addFunctionController = controller;
        addFunctionController.setShowsComboBox(showsComboBox);
        
        
        Time durationShowSelect = addFunctionController.shows.get(showsComboBox.getSelectedIndex()).getDuration();
        String hourSelected = hourSpinner.getValue().toString();
        String minutesSelected = minutesSpinner.getValue().toString();
               
        java.sql.Time myTime = java.sql.Time.valueOf(durationShowSelect.toString());
        LocalTime localtime = myTime.toLocalTime();
        localtime = localtime.plusHours(Long.valueOf(hourSelected));
        localtime = localtime.plusMinutes(Long.valueOf(minutesSelected));
        
        String endingTime = localtime.toString();
        
        endingHourFunctionTextField.setText(endingTime);
    }

    private AddFunctionsView(JFrame jFrame, boolean b) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        showsComboBox = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        date = new java.util.Date();
        dateFunctionChooser = new com.toedter.calendar.JDateChooser();
        jLabel4 = new javax.swing.JLabel();
        endingHourFunctionTextField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        addFunctionButton = new javax.swing.JButton();
        cleanFields = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        hourSpinner = new javax.swing.JSpinner();
        minutesSpinner = new javax.swing.JSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jLabel2.setText("Añadir funcion");

        jLabel5.setText("Show");

        showsComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showsComboBoxActionPerformed(evt);
            }
        });

        jLabel3.setText("Fecha");

        dateFunctionChooser.setDateFormatString("yyyy-MM-dd");
        dateFunctionChooser.setMinSelectableDate(date);

        jLabel4.setText("Hora de comienzo");

        endingHourFunctionTextField.setEnabled(false);

        jLabel6.setText("Hora de finalizacion");

        addFunctionButton.setText("+Añadir");
        addFunctionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFunctionButtonActionPerformed(evt);
            }
        });

        cleanFields.setText("Limpiar campos");
        cleanFields.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cleanFieldsActionPerformed(evt);
            }
        });

        jLabel14.setText("Formato hh:mm");

        hourSpinner.setModel(new javax.swing.SpinnerNumberModel(10, 0, 23, 1));
        hourSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                hourSpinnerStateChanged(evt);
            }
        });

        minutesSpinner.setModel(new javax.swing.SpinnerNumberModel(30, 0, 59, 1));
        minutesSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                minutesSpinnerStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(164, 164, 164)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel6))
                                .addGap(33, 33, 33)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(endingHourFunctionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(hourSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(minutesSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel3))
                                .addGap(30, 30, 30)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(dateFunctionChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(showsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(addFunctionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(80, 80, 80)
                                .addComponent(cleanFields)))))
                .addGap(33, 105, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel14)
                .addGap(130, 130, 130))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel2)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(showsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(dateFunctionChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addComponent(jLabel14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(hourSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minutesSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(endingHourFunctionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addFunctionButton)
                    .addComponent(cleanFields))
                .addContainerGap(37, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cleanFields(){
        ((JTextField)dateFunctionChooser.getDateEditor().getUiComponent()).setText("");
        hourSpinner.setValue(10);
        minutesSpinner.setValue(30);
        endingHourFunctionTextField.setText("");
    }
    
    private void addFunctionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFunctionButtonActionPerformed
        boolean isFieldEmpty = ((JTextField)dateFunctionChooser.getDateEditor().getUiComponent()).getText().isEmpty()
                    || hourSpinner.getValue().toString().compareTo("") == -1
                    || minutesSpinner.getValue().toString().compareTo("") == -1
                    || endingHourFunctionTextField.getText().isEmpty();
        
            
            if(!isFieldEmpty){
                                       
                ShowDAO showBD = new ShowDAO();

                FunctionDAO functionBD = new FunctionDAO();
                ArrayList<Function> functionsResult = functionBD.getBusySchedules("'" + addFunctionController.formatDate(dateFunctionChooser) +"'",
                        "'" + hourSpinner.getValue().toString() + ":" + minutesSpinner.getValue().toString() + ":00'", 
                        "'" + endingHourFunctionTextField.getText() + ":00'"
                    );
                try {
                    if(functionsResult.isEmpty()){
                        addFunctionController.addFunction(Date.valueOf(addFunctionController.formatDate(dateFunctionChooser)),
                                Time.valueOf(hourSpinner.getValue().toString() + ":" + minutesSpinner.getValue().toString() + ":00"),
                                Time.valueOf(endingHourFunctionTextField.getText() + ":00"),
                                showBD.getIdShowByName(showsComboBox.getSelectedItem().toString()),
                                "Disponible"
                                );

                        cleanFields();
                        
                        Time durationShowSelect = addFunctionController.shows.get(showsComboBox.getSelectedIndex()).getDuration();
                        String hourSelected = hourSpinner.getValue().toString();
                        String minutesSelected = minutesSpinner.getValue().toString();

                        java.sql.Time myTime = java.sql.Time.valueOf(durationShowSelect.toString());
                        LocalTime localtime = myTime.toLocalTime();
                        localtime = localtime.plusHours(Long.valueOf(hourSelected));
                        localtime = localtime.plusMinutes(Long.valueOf(minutesSelected));

                        String endingTime = localtime.toString();

                        endingHourFunctionTextField.setText(endingTime);
                        
                    }
                    else{

                        JOptionPane.showMessageDialog(this, "El horario ingresado colisiona con otra funcion"
                                + " o no respeta los 30 minutos entre funciones.\nProblemas con la funcion:\n"
                                + "id: " +functionsResult.get(0).getIdFunction() + "\n"
                                + "fecha: " + functionsResult.get(0).getDate() + "\n"
                                + "hora de inicio: " + functionsResult.get(0).getStartTime() + "\n"
                                + "hora de fin: " + functionsResult.get(0).getEndingTime()
                        );
                    }    
                } catch (IllegalArgumentException e) {
                    JOptionPane.showMessageDialog(this, "Error de formato en los horarios");
                }
                
            }
            else{
                JOptionPane.showMessageDialog(this, "Campos Vacios");
            }
    }//GEN-LAST:event_addFunctionButtonActionPerformed

    private void cleanFieldsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cleanFieldsActionPerformed
        cleanFields();
    }//GEN-LAST:event_cleanFieldsActionPerformed

    private void hourSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_hourSpinnerStateChanged
        Time durationShowSelect = addFunctionController.shows.get(showsComboBox.getSelectedIndex()).getDuration();
        String hourSelected = hourSpinner.getValue().toString();
        String minutesSelected = minutesSpinner.getValue().toString();
               
        java.sql.Time myTime = java.sql.Time.valueOf(durationShowSelect.toString());
        LocalTime localtime = myTime.toLocalTime();
        localtime = localtime.plusHours(Long.valueOf(hourSelected));
        localtime = localtime.plusMinutes(Long.valueOf(minutesSelected));
        
        String endingTime = localtime.toString();
        
        endingHourFunctionTextField.setText(endingTime);
    }//GEN-LAST:event_hourSpinnerStateChanged

    private void minutesSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_minutesSpinnerStateChanged
        Time durationShowSelect = addFunctionController.shows.get(showsComboBox.getSelectedIndex()).getDuration();
        String hourSelected = hourSpinner.getValue().toString();
        String minutesSelected = minutesSpinner.getValue().toString();
               
        java.sql.Time myTime = java.sql.Time.valueOf(durationShowSelect.toString());
        LocalTime localtime = myTime.toLocalTime();
        localtime = localtime.plusHours(Long.valueOf(hourSelected));
        localtime = localtime.plusMinutes(Long.valueOf(minutesSelected));
        
        String endingTime = localtime.toString();
        
        endingHourFunctionTextField.setText(endingTime);
    }//GEN-LAST:event_minutesSpinnerStateChanged

    private void showsComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showsComboBoxActionPerformed
        Time durationShowSelect = addFunctionController.shows.get(showsComboBox.getSelectedIndex()).getDuration();
        String hourSelected = hourSpinner.getValue().toString();
        String minutesSelected = minutesSpinner.getValue().toString();
               
        java.sql.Time myTime = java.sql.Time.valueOf(durationShowSelect.toString());
        LocalTime localtime = myTime.toLocalTime();
        localtime = localtime.plusHours(Long.valueOf(hourSelected));
        localtime = localtime.plusMinutes(Long.valueOf(minutesSelected));
        
        String endingTime = localtime.toString();
        
        endingHourFunctionTextField.setText(endingTime);
    }//GEN-LAST:event_showsComboBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddFunctionsView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddFunctionsView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddFunctionsView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddFunctionsView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                AddFunctionsView dialog = new AddFunctionsView(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton addFunctionButton;
    public javax.swing.JButton cleanFields;
    public java.util.Date date;
    public com.toedter.calendar.JDateChooser dateFunctionChooser;
    public javax.swing.JTextField endingHourFunctionTextField;
    private javax.swing.JSpinner hourSpinner;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JSpinner minutesSpinner;
    public javax.swing.JComboBox<String> showsComboBox;
    // End of variables declaration//GEN-END:variables
}
